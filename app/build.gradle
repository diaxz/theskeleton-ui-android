apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion setup.compileSdkVersion
    buildToolsVersion setup.buildToolsVersion

    defaultConfig {
        applicationId setup.applicationId
        minSdkVersion setup.minSdkVersion
        targetSdkVersion setup.targetSdkVersion
        versionCode buildVersionCode()
        versionName buildVersionName()
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    productFlavors {
        dev {
            versionNameSuffix setup.devVersionNameSuffix
            applicationIdSuffix setup.devApplicationIdSuffix
            resValue "string", "app_name", String.format("%s", setup.devAppName)
        }
        stage {
            versionNameSuffix setup.stageVersionNameSuffix
            applicationIdSuffix setup.stageApplicationIdSuffix
            resValue "string", "app_name", String.format("%s", setup.stageAppName)
        }
        beta {
            versionNameSuffix setup.betaVersionNameSuffix
            applicationIdSuffix setup.betaApplicationIdSuffix
            resValue "string", "app_name", String.format("%s", setup.betaAppName)
        }
        store {
            resValue "string", "app_name", String.format("%s", setup.appName)
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'META-INF/LICENSE'
    }
}

configurations {
    devDebugCompile
    devReleaseCompile
    stageDebugCompile
    stageReleaseCompile
    betaDebugCompile
    betaReleaseCompile
    storeDebugCompile
    storeReleaseCompile
}

dependencies {
    rootProject.appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }

    devDebugCompile project(path: ':data', configuration: 'devDebug')
    devReleaseCompile project(path: ':data', configuration: 'devRelease')
    stageDebugCompile project(path: ':data', configuration: 'stageDebug')
    stageReleaseCompile project(path: ':data', configuration: 'stageRelease')
    betaDebugCompile project(path: ':data', configuration: 'betaDebug')
    betaReleaseCompile project(path: ':data', configuration: 'betaRelease')
    storeDebugCompile project(path: ':data', configuration: 'storeDebug')
    storeReleaseCompile project(path: ':data', configuration: 'storeRelease')

    devDebugCompile project(path: ':domain', configuration: 'debug')
    devReleaseCompile project(path: ':domain', configuration: 'release')
    stageDebugCompile project(path: ':domain', configuration: 'debug')
    stageReleaseCompile project(path: ':domain', configuration: 'release')
    betaDebugCompile project(path: ':domain', configuration: 'debug')
    betaReleaseCompile project(path: ':domain', configuration: 'release')
    storeDebugCompile project(path: ':domain', configuration: 'debug')
    storeReleaseCompile project(path: ':domain', configuration: 'release')
}
